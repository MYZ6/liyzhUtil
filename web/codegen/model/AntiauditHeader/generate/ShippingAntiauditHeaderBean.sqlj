/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Tue Sep 16 16:28:32 CST 2014 by lyz
 * Last edited on Tue Sep 16 16:28:32 CST 2014 by lyz
 * 
 * comment: 餐厅配送反审核单表头
 */
package logic.form;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import pojo.form.ShippingAntiauditHeader;
import sqlj.runtime.ref.DefaultContext;
import util.SqlDateUtil;
import util.TextUtil;
import acl.NoPrivilegeException;

public class ShippingAntiauditHeaderBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(ShippingAntiauditHeaderBean.class);
	
	#sql private iterator HeaderIter(String form_id, String form_ref_id, String form_name, String antiauditor, Date antiaudit_branch, String antiaudit_time, Date form_note, String all_pay_amt, String max_pay_item);
	
	public int saveEntity(ShippingAntiauditHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		String formId = header.getFormId();
		String formRefId = header.getFormRefId();
		String formName = header.getFormName();
		String antiauditor = header.getAntiauditor();
		Date antiauditBranch = SqlDateUtil.getSqlDate(header.getAntiauditBranch());
		String antiauditTime = header.getAntiauditTime();
		Date formNote = SqlDateUtil.getSqlDate(header.getFormNote());
		String allPayAmt = header.getAllPayAmt();
		String maxPayItem = header.getMaxPayItem();

		#sql [myCtx] {
			INSERT INTO D_T1_SHIPPING_ANTIAUDIT_HEADER 
				(FORM_ID, FORM_REF_ID, FORM_NAME, ANTIAUDITOR, ANTIAUDIT_BRANCH, ANTIAUDIT_TIME, FORM_NOTE, ALL_PAY_AMT, MAX_PAY_ITEM) 
			VALUES (:formId, :formRefId, :formName, :antiauditor, :antiauditBranch, :antiauditTime, :formNote, :allPayAmt, :maxPayItem)
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int updateEntity(ShippingAntiauditHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String formId = header.getFormId();
		String formRefId = header.getFormRefId();
		String formName = header.getFormName();
		String antiauditor = header.getAntiauditor();
		Date antiauditBranch = SqlDateUtil.getSqlDate(header.getAntiauditBranch());
		String antiauditTime = header.getAntiauditTime();
		Date formNote = SqlDateUtil.getSqlDate(header.getFormNote());
		String allPayAmt = header.getAllPayAmt();
		String maxPayItem = header.getMaxPayItem();

		#sql [myCtx] {
			UPDATE
				D_T1_SHIPPING_ANTIAUDIT_HEADER
			SET
				FORM_ID = :formId,
				FORM_REF_ID = :formRefId,
				FORM_NAME = :formName,
				ANTIAUDITOR = :antiauditor,
				ANTIAUDIT_BRANCH = :antiauditBranch,
				ANTIAUDIT_TIME = :antiauditTime,
				FORM_NOTE = :formNote,
				ALL_PAY_AMT = :allPayAmt,
				MAX_PAY_ITEM = :maxPayItem
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int deleteEntity(String formId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			DELETE
			FROM
				D_T1_SHIPPING_ANTIAUDIT_HEADER
			WHERE
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int audit(String formId, String userId, java.util.Date auditTime)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		Date sAuditTime = SqlDateUtil.getSqlDate(auditTime);
		#sql [myCtx] {
			UPDATE
				D_T1_SHIPPING_ANTIAUDIT_HEADER
			SET
				auditor = :userId,
				audit_time = :sAuditTime
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int count(java.util.Date startDate, java.util.Date endDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
				D_T1_SHIPPING_ANTIAUDIT_HEADER h
			WHERE
				:{query ::}
			AND (h.AUDIT_TIME >= :sDate or :sDate is null)
			AND (h.AUDIT_TIME <= :eDate or :eDate is null)
		};
		closeDefaultContext(myCtx);
		return total;
	}
	
	private String formQuery(String branchId) {
		String query = " 1=1";
		if (!TextUtil.isEmpty(branchId)) {
			query = query + " AND h.BUYER_NAME = " + branchId;
		}
		return query;
	}
	
	public List<ShippingAntiauditHeader> query(java.util.Date startDate, java.util.Date endDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			FROM
				D_T1_SHIPPING_ANTIAUDIT_HEADER h
			WHERE
				:{query ::}
			AND (h.AUDIT_TIME >= :sDate or :sDate is null)
			AND (h.AUDIT_TIME <= :eDate or :eDate is null)
		};
		List<ShippingAntiauditHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	/**
	 * 获取未审核要货单列表总数
	 */
	public int countAudit(java.util.Date startDate, java.util.Date endDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formAuditQuery(branchId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
				D_T1_SHIPPING_ANTIAUDIT_HEADER h
			LEFT JOIN
			    JONO.D_T0_FORM_STATUS s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query ::}
			AND (h.AUDIT_TIME >= :sDate or :sDate is null)
			AND (h.AUDIT_TIME <= :eDate or :eDate is null)
		};
		closeDefaultContext(myCtx);
		return total;
	}

	private String formAuditQuery(String branchId) {
		String query = " 1=1";
		if (!TextUtil.isEmpty(branchId)) {
			query = query + " AND h.BUYER_NAME = " + branchId;
		}
		query = query + " AND NVL( s.STATUS, 'null') != '已作废'";
		query = query + " AND NVL( s.STATUS, 'null') != '已审核'";
		return query;
	}

	/**
	 * 获取未审核要货单列表
	 */
	public List<ShippingAntiauditHeader> queryAudit(java.util.Date startDate, java.util.Date endDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formAuditQuery(branchId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			FROM
				D_T1_SHIPPING_ANTIAUDIT_HEADER h
			LEFT JOIN
			    JONO.D_T0_FORM_STATUS s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query ::}
			AND (h.AUDIT_TIME >= :sDate or :sDate is null)
			AND (h.AUDIT_TIME <= :eDate or :eDate is null)
				and h.auditor is null
		};
		List<ShippingAntiauditHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}

	public ShippingAntiauditHeader queryById(String formId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			FROM
				D_T1_SHIPPING_ANTIAUDIT_HEADER h
			WHERE
				h.form_id = :formId
		};
		List<ShippingAntiauditHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		if (headerLst !=null && !headerLst.isEmpty()) {
			return headerLst.get(0);
		}
		return null;
	}
	
	private List<ShippingAntiauditHeader> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<ShippingAntiauditHeader> headerLst = new ArrayList<ShippingAntiauditHeader>();
		while(headerIter.next()) {
			ShippingAntiauditHeader header = new ShippingAntiauditHeader();
			header.setFormId(headerIter.form_id());
			header.setFormRefId(headerIter.form_ref_id());
			header.setFormName(headerIter.form_name());
			header.setAntiauditor(headerIter.antiauditor());
			header.setAntiauditBranch(SqlDateUtil.getUtilDate(headerIter.antiaudit_branch()));
			header.setAntiauditTime(headerIter.antiaudit_time());
			header.setFormNote(SqlDateUtil.getUtilDate(headerIter.form_note()));
			header.setAllPayAmt(headerIter.all_pay_amt());
			header.setMaxPayItem(headerIter.max_pay_item());
			headerLst.add(header);
		}
		return headerLst;
	}
}